//import java.awt.JavaPanel;
//import java.awt.JavaButton;
//import java.awt.TextField;
//import java.awt.TextArea;
//import java.awt.List;
//import java.awt.BorderLayout;
//import java.io.DataInputStream;
//import java.awt.Color;
//import java.awt.event.*;
using System;
using UnityEngine;
using UnityEngine.UI;

internal class TextField : JavaComponent
{
    /*
A TextField object is a text component that allows for the editing of a single line of text.
Every time the user types a key in the text field, one or more key events are sent to the text field. 
A KeyEvent may be one of three types: keyPressed, keyReleased, or keyTyped. The properties of a key event 
indicate which of these types it is, as well as additional information about the event, such as what modifiers 
are applied to the key event and the time at which the event occurred.

The key event is passed to every KeyListener or KeyAdapter object which registered to receive such events 
using the component's addKeyListener method. (KeyAdapter objects implement the KeyListener interface.)

It is also possible to fire an ActionEvent. If action events are enabled for the text field, they may be 
fired by pressing the Return key.

The TextField class's processEvent method examines the action event and passes it along to processActionEvent. 
The latter method redirects the event to any ActionListener objects that have registered to receive action 
events generated by this text field.

TextField()
Constructs a new text field.
TextField(int columns)
Constructs a new empty text field with the specified number of columns.
     */

    private int columns; //A column is an approximate average character width that is platform-dependent.
    string TEXT;

    UnityInputFieldComponents unityComponents;


    public TextField(int columns) //TextField(int columns) //Constructs a new empty text field with the specified number of columns.
    {
        this.columns = columns;
        unityComponentGroup = UnityJavaInterface.AddTextEntryField();
        unityComponents = (UnityInputFieldComponents)unityComponentGroup;
    }

    public TextField()
    {
        unityComponentGroup = UnityJavaInterface.AddTextEntryField();
        unityComponents = (UnityInputFieldComponents)unityComponentGroup;
    }

    internal void setFont(JavaFont chatFont)
    {
        if (chatFont != null)
        {
            unityComponents.inputFieldComponent.textComponent.font = chatFont.UnityFont;
            unityComponents.inputFieldComponent.textComponent.fontSize = chatFont.fontSize;
            unityComponents.inputFieldComponent.textComponent.fontStyle = chatFont.fontStyle;
        }
        else
        {
            Debug.LogError("chatFont doesn't exist");
        }
    }

    internal void addIJavaKeyListener(chatPne chatPne)
    {
        //unnecessary for unity
    }

    internal string getText()
    {
        //todo: this causes text sent to be empty. also masking isn't working anyway
        //if (echoChar != 'K') //don't update from unityComponent if echo masking in use 
        //    return TEXT;
        TEXT = unityComponents.inputFieldComponent.text; // textComponent.text; //textcomponent holds only the visible text
        return TEXT;
    }

    internal void setText(string v) //todo - call in unityjavainterface after unity input field update
    {
        TEXT = v;
        if (echoChar != 'K') //should mask text entry (passwords)
        {
            unityComponents.inputFieldComponent.text = ""; // textComponent.text = ""; //textcomponent holds only the visible text
            for (int i = 0; i < TEXT.Length; i++)
            {
                unityComponents.inputFieldComponent.text += echoChar.ToString();
            }
        }
        else
        {
            unityComponents.inputFieldComponent.text = TEXT;
        }
    }

    internal void requestFocus()
    {
        //unnecessary for unity
    }
    
    char echoChar = 'K';
    internal void setEchoChar(char v) //Sets the echo character for this text field. An echo character is useful for text fields where user input should not be echoed to the screen, as in the case of a text field for entering a password.
    {
        echoChar = v;
    }

    internal void addActionListener(IJavaActionListener actListener) //addActionListener(ActionListener l)    //Adds the specified action listener to receive action events from this text field.
    {
        //unnecessary for unity
    } 
}